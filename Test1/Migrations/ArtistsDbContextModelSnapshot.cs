// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test1.Models;

namespace Test1.Migrations
{
    [DbContext(typeof(ArtistsDbContext))]
    partial class ArtistsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Test1.Models.Artist", b =>
                {
                    b.Property<int>("idArtist")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("idArtist");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Test1.Models.ArtistEvent", b =>
                {
                    b.Property<int>("idArtist")
                        .HasColumnType("int");

                    b.Property<int>("idEvent")
                        .HasColumnType("int");

                    b.Property<DateTime>("performanceDate")
                        .HasColumnType("datetime2");

                    b.HasKey("idArtist", "idEvent");

                    b.HasIndex("idEvent");

                    b.ToTable("ArtistEvents");
                });

            modelBuilder.Entity("Test1.Models.Event", b =>
                {
                    b.Property<int>("idEvent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.HasKey("idEvent");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Test1.Models.EventOrganiser", b =>
                {
                    b.Property<int>("idEvent")
                        .HasColumnType("int");

                    b.Property<int>("idOrganiser")
                        .HasColumnType("int");

                    b.HasKey("idEvent", "idOrganiser");

                    b.HasIndex("idOrganiser");

                    b.ToTable("EventOrganisers");
                });

            modelBuilder.Entity("Test1.Models.Organiser", b =>
                {
                    b.Property<int>("idOrganiser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("idOrganiser");

                    b.ToTable("Organisers");
                });

            modelBuilder.Entity("Test1.Models.ArtistEvent", b =>
                {
                    b.HasOne("Test1.Models.Artist", "artist")
                        .WithMany("artistEvents")
                        .HasForeignKey("idArtist")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test1.Models.Event", "event_")
                        .WithMany("artistEvents")
                        .HasForeignKey("idEvent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test1.Models.EventOrganiser", b =>
                {
                    b.HasOne("Test1.Models.Event", "event_")
                        .WithMany("eventOrganisers")
                        .HasForeignKey("idEvent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test1.Models.Organiser", "organiser")
                        .WithMany("eventOrganisers")
                        .HasForeignKey("idOrganiser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
